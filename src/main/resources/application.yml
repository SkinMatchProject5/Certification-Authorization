spring:
  application:
    name: auth-app
    
  # Profile Configuration - local 프로파일 자동 활성화
  profiles:
    active: local

  # Jackson Configuration
  jackson:
    date-format: yyyy-MM-dd'T'HH:mm:ss
    time-zone: Asia/Seoul
    serialization:
      write-dates-as-timestamps: false

  # File Upload Configuration
  servlet:
    multipart:
      enabled: true
      max-file-size: 5MB
      max-request-size: 5MB
      location: ${java.io.tmpdir}

  # Web Configuration
  web:
    resources:
      static-locations: classpath:/static/
      add-mappings: true
  mvc:
    throw-exception-if-no-handler-found: false

  # Database Configuration (MySQL)
  datasource:
    url: jdbc:mysql://localhost:3306/skincare_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 1234 


  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update  # 개발 시 스키마 자동 업데이트로 데이터 유지
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect

  # Security OAuth Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 937808358663-11h9s4rlm81fumno2fd20qlrmlrt6e4i.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
            redirect-uri: "http://localhost:8081/login/oauth2/code/google"

          naver:
            client-id: QCI9gN2PWwDmj8X0RuPt
            client-secret: GUrRsMZWkB
            authorization-grant-type: authorization_code
            redirect-uri: "http://localhost:8081/login/oauth2/code/naver"
            scope:
              - name
              - email
            client-name: Naver

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:defaultSecretKeyForDevelopmentOnly123456789}  # 환경변수 또는 기본값
  expiration: 86400  # 24시간 (초 단위)
  refresh-expiration: 604800  # 7일 (초 단위)

# File Storage Configuration
app:
  file:
    upload-dir: uploads
    base-url: http://localhost:8081

# CORS Configuration
cors:
  allowed-origins:
    - http://localhost:3000
    - http://localhost:5173
    - http://localhost:8081
    - http://localhost:8080
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  allow-credentials: true

# Server Configuration
server:
  port: 8081

# Logging Configuration
logging:
  level:
    com.example.authapp: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: TRACE
    org.springframework.web: DEBUG